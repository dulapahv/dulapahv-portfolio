import { render } from '@testing-library/react';
import { describe, expect, it, vi } from 'vitest';

import ContentPage from './page';

// Mock next/navigation
vi.mock('next/navigation', () => ({
  usePathname: () => '/project/test-project'
}));

// Mock content utilities with sample data
const mockBlogPost = {
  _meta: { path: 'test-blog' },
  slug: 'test-blog',
  title: 'Test Blog Post',
  description: 'A test blog post',
  date: new Date('2024-01-15'),
  content: 'Test content',
  body: 'compiled-mdx-code',
  readingTime: '5 min read',
  image: '/test-image.jpg'
};

const mockProject = {
  _meta: { path: 'test-project' },
  slug: 'test-project',
  title: 'Test Project',
  description: 'A test project',
  startDate: new Date('2024-01-01'),
  endDate: new Date('2024-12-31'),
  content: 'Test content',
  body: 'compiled-mdx-code',
  image: '/test-project.jpg'
};

const mockWork = {
  _meta: { path: 'test-work' },
  slug: 'test-work',
  position: 'Software Engineer',
  company: 'Test Company',
  location: 'Test Location',
  startDate: new Date('2024-01-01'),
  endDate: new Date('2024-12-31'),
  content: 'Test content',
  body: 'compiled-mdx-code'
};

vi.mock('@/lib/content-utils', () => ({
  contentConfig: {
    project: { label: 'Project' },
    blog: { label: 'Blog' },
    work: { label: 'Work' }
  },
  isValidContentType: (type: string) => ['project', 'blog', 'work'].includes(type),
  getCollection: vi.fn((type: string) => {
    if (type === 'blog') return [mockBlogPost];
    if (type === 'project') return [mockProject];
    if (type === 'work') return [mockWork];
    return [];
  })
}));

describe('Content Detail Page', () => {
  it('should render blog post and match snapshot', async () => {
    const component = await ContentPage({
      params: Promise.resolve({ type: 'blog', slug: 'test-blog' }),
      searchParams: Promise.resolve({})
    });
    const { container } = render(component);
    expect(container).toMatchSnapshot();
  });

  it('should render project page and match snapshot', async () => {
    const component = await ContentPage({
      params: Promise.resolve({ type: 'project', slug: 'test-project' }),
      searchParams: Promise.resolve({})
    });
    const { container } = render(component);
    expect(container).toMatchSnapshot();
  });

  it('should render work page and match snapshot', async () => {
    const component = await ContentPage({
      params: Promise.resolve({ type: 'work', slug: 'test-work' }),
      searchParams: Promise.resolve({})
    });
    const { container } = render(component);
    expect(container).toMatchSnapshot();
  });
});
